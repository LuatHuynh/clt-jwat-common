// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.175.0
//   protoc               v5.26.1
// source: film.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export interface FilmResponse {
  data?: Film | undefined;
  message?: string | undefined;
  code?: number | undefined;
}

export interface ListFilmResponse {
  data: Film[];
  message?: string | undefined;
  code?: number | undefined;
}

export interface FilmById {
  id: string;
}

export interface SearchQuery {
  key?: string | undefined;
}

export interface CreateFilmRequest {
  title: string;
  description?: string | undefined;
  order?: number | undefined;
  director?: string | undefined;
  duration?: number | undefined;
  thumbnail?: string | undefined;
  path?: string | undefined;
  releasedDate?: Date | undefined;
}

export interface UpdateFilmRequest {
  id: string;
  title?: string | undefined;
  description?: string | undefined;
  order?: number | undefined;
  director?: string | undefined;
  duration?: number | undefined;
  thumbnail?: string | undefined;
  path?: string | undefined;
  releasedDate?: Date | undefined;
}

export interface Films {
  films: Film[];
}

export interface Film {
  filmId: string;
  title: string;
  description: string;
  status: boolean;
  view: number;
  order: number;
  thumbnail: string;
  path: string;
  director: string;
  duration: number;
  releasedDate: Date | undefined;
  createdAt: Date | undefined;
  modifiedAt: Date | undefined;
  deletedAt: Date | undefined;
}

export const FILMS_PACKAGE_NAME = "films";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface FilmsServiceClient {
  findOne(request: FilmById): Observable<FilmResponse>;

  findAllFilms(request: SearchQuery): Observable<ListFilmResponse>;

  createFilm(request: CreateFilmRequest): Observable<FilmResponse>;

  updateFilm(request: UpdateFilmRequest): Observable<FilmResponse>;

  deleteFilm(request: FilmById): Observable<FilmResponse>;
}

export interface FilmsServiceController {
  findOne(request: FilmById): Promise<FilmResponse> | Observable<FilmResponse> | FilmResponse;

  findAllFilms(request: SearchQuery): Promise<ListFilmResponse> | Observable<ListFilmResponse> | ListFilmResponse;

  createFilm(request: CreateFilmRequest): Promise<FilmResponse> | Observable<FilmResponse> | FilmResponse;

  updateFilm(request: UpdateFilmRequest): Promise<FilmResponse> | Observable<FilmResponse> | FilmResponse;

  deleteFilm(request: FilmById): Promise<FilmResponse> | Observable<FilmResponse> | FilmResponse;
}

export function FilmsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne", "findAllFilms", "createFilm", "updateFilm", "deleteFilm"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FilmsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FilmsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FILMS_SERVICE_NAME = "FilmsService";
