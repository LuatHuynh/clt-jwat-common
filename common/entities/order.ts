// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';
import { Product } from './product';

export interface OrderResponse {
  code: number;
  message?: string | undefined;
  order?: Order | undefined;
}

export interface OrdersResponse {
  code: number;
  message?: string | undefined;
  orders: Order[];
}

export interface OrderIdDto {
  id: string;
}

export interface OrderItem {
  orderId: string;
  productId: string;
  quantity: number;
  price: number;
  product?: Product | undefined;
  createdAt: Date | undefined;
  deletedAt?: Date | undefined;
  updatedAt: Date | undefined;
}

export interface UpdateOrderStatusDto {
  status: string;
  orderId: string;
}

export interface Order {
  orderId: string;
  phoneNumber: string;
  email: string;
  customerName: string;
  address: string;
  status: string;
  orderItems: OrderItem[];
  createdAt: Date | undefined;
  deletedAt?: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Orders {
  orders: Order[];
}

export interface CreateOrderDto {
  phoneNumber: string;
  email: string;
  address: string;
  customerName: string;
  orderProducts: OrderProductDto[];
}

export interface OrderProductDto {
  productId: string;
  quantity: number;
}

export interface OrderFilterDto {
  phoneNumber?: string | undefined;
  email?: string | undefined;
  customerName?: string | undefined;
  address?: string | undefined;
  status?: string | undefined;
  minTotal?: number | undefined;
  maxTotal?: number | undefined;
  fromDate?: Date | undefined;
  toDate?: Date | undefined;
}

export const ORDER_PACKAGE_NAME = 'order';

wrappers['.google.protobuf.Timestamp'] = {
  fromObject(value: Date) {
    return {
      seconds: value.getTime() / 1000,
      nanos: (value.getTime() % 1000) * 1e6,
    };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface OrderServiceClient {
  findOrderById(request: OrderIdDto): Observable<OrderResponse>;

  findOrderWithFilter(request: OrderFilterDto): Observable<OrdersResponse>;

  createOrder(request: CreateOrderDto): Observable<OrderResponse>;

  updateOrderStatus(request: UpdateOrderStatusDto): Observable<OrderResponse>;

  deleteOrder(request: OrderIdDto): Observable<OrderResponse>;
}

export interface OrderServiceController {
  findOrderById(
    request: OrderIdDto,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  findOrderWithFilter(
    request: OrderFilterDto,
  ): Promise<OrdersResponse> | Observable<OrdersResponse> | OrdersResponse;

  createOrder(
    request: CreateOrderDto,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  updateOrderStatus(
    request: UpdateOrderStatusDto,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  deleteOrder(
    request: OrderIdDto,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'findOrderById',
      'findOrderWithFilter',
      'createOrder',
      'updateOrderStatus',
      'deleteOrder',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ORDER_SERVICE_NAME = 'OrderService';
