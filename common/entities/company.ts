// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.0
// source: company.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";


export interface Company {
  companyId: string;
  name: string;
  email: string;
  address: string;
  phoneNumber: string;
  createdAt: Date | undefined;
  deletedAt?: Date | undefined;
  updatedAt: Date | undefined;
}

export interface FindAllCompanyResponse {
  status: number;
  message: string[];
  companies: Company[];
}

export interface FindCompanyByIdResponse {
  status: number;
  message: string[];
  companies?: Company | undefined;
}

export interface FindCompanyDto {
  companyId: string;
}

export interface FindAllCompanyDto {
  name?: string | undefined;
  email?: string | undefined;
}

export interface AllCompany {
  companies: Company[];
}

export interface CreateCompanyDto {
  name: string;
  email: string;
  address: string;
  phoneNumber: string;
}

export interface UpdateCompanyDto {
  companyId: string;
  name?: string | undefined;
  email?: string | undefined;
  address?: string | undefined;
  phoneNumber?: string | undefined;
}

export interface Empty {
}

export const COMPANY_PACKAGE_NAME = "company";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface CompanyServiceClient {
  findAll(request: FindAllCompanyDto): Observable<FindAllCompanyResponse>;

  findOneById(request: FindCompanyDto): Observable<FindCompanyByIdResponse>;

  create(request: CreateCompanyDto): Observable<FindCompanyByIdResponse>;

  update(request: UpdateCompanyDto): Observable<FindCompanyByIdResponse>;

  delete(request: FindCompanyDto): Observable<FindCompanyByIdResponse>;
}

export interface CompanyServiceController {
  findAll(
    request: FindAllCompanyDto,
  ): Promise<FindAllCompanyResponse> | Observable<FindAllCompanyResponse> | FindAllCompanyResponse;

  findOneById(
    request: FindCompanyDto,
  ): Promise<FindCompanyByIdResponse> | Observable<FindCompanyByIdResponse> | FindCompanyByIdResponse;

  create(
    request: CreateCompanyDto,
  ): Promise<FindCompanyByIdResponse> | Observable<FindCompanyByIdResponse> | FindCompanyByIdResponse;

  update(
    request: UpdateCompanyDto,
  ): Promise<FindCompanyByIdResponse> | Observable<FindCompanyByIdResponse> | FindCompanyByIdResponse;

  delete(
    request: FindCompanyDto,
  ): Promise<FindCompanyByIdResponse> | Observable<FindCompanyByIdResponse> | FindCompanyByIdResponse;
}

export function CompanyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAll", "findOneById", "create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CompanyService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CompanyService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMPANY_SERVICE_NAME = "CompanyService";
