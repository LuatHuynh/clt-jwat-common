// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: teacher.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';

export interface TeacherResponse {
  error?: string | undefined;
  status?: string | undefined;
  teacher?: Teacher | undefined;
}

export interface TeachersResponse {
  error?: string | undefined;
  status?: string | undefined;
  teachers: Teacher[];
}

export interface CreateTeacherDto {
  firstName: string;
  lastName: string;
  gender: string;
  dateOfBirth: Date | undefined;
  specialize: string;
  classId?: string | undefined;
}

export interface UpdateTeacherDto {
  id: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  gender?: string | undefined;
  dateOfBirth?: Date | undefined;
  specialize?: string | undefined;
  classId?: string | undefined;
}

export interface RemoveTeacherDto {
  id: string;
}

export interface FindTeacherByIdDto {
  id: string;
}

export interface FindAllTeacherDto {}

export interface SearchByQueryDto {
  firstName?: string | undefined;
  lastName?: string | undefined;
  gender?: string | undefined;
  specialize?: string | undefined;
}

export interface Teachers {
  teacher: Teacher[];
}

export interface Teacher {
  id: string;
  firstName: string;
  lastName: string;
  gender: string;
  dateOfBirth: Date | undefined;
  specialize: string;
  classId: string;
  createdAt: Date | undefined;
  deletedAt?: Date | undefined;
  updatedAt: Date | undefined;
}

export const TEACHER_PACKAGE_NAME = 'teacher';

wrappers['.google.protobuf.Timestamp'] = {
  fromObject(value: Date) {
    return {
      seconds: value.getTime() / 1000,
      nanos: (value.getTime() % 1000) * 1e6,
    };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface TeacherServiceClient {
  findById(request: FindTeacherByIdDto): Observable<TeacherResponse>;

  findAll(request: FindAllTeacherDto): Observable<TeachersResponse>;

  searchByQuery(request: SearchByQueryDto): Observable<TeachersResponse>;

  create(request: CreateTeacherDto): Observable<TeacherResponse>;

  update(request: UpdateTeacherDto): Observable<TeacherResponse>;

  remove(request: RemoveTeacherDto): Observable<TeacherResponse>;
}

export interface TeacherServiceController {
  findById(
    request: FindTeacherByIdDto,
  ): Promise<TeacherResponse> | Observable<TeacherResponse> | TeacherResponse;

  findAll(
    request: FindAllTeacherDto,
  ):
    | Promise<TeachersResponse>
    | Observable<TeachersResponse>
    | TeachersResponse;

  searchByQuery(
    request: SearchByQueryDto,
  ):
    | Promise<TeachersResponse>
    | Observable<TeachersResponse>
    | TeachersResponse;

  create(
    request: CreateTeacherDto,
  ): Promise<TeacherResponse> | Observable<TeacherResponse> | TeacherResponse;

  update(
    request: UpdateTeacherDto,
  ): Promise<TeacherResponse> | Observable<TeacherResponse> | TeacherResponse;

  remove(
    request: RemoveTeacherDto,
  ): Promise<TeacherResponse> | Observable<TeacherResponse> | TeacherResponse;
}

export function TeacherServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'findById',
      'findAll',
      'searchByQuery',
      'create',
      'update',
      'remove',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('TeacherService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('TeacherService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const TEACHER_SERVICE_NAME = 'TeacherService';
